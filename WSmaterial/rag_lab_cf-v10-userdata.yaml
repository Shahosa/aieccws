AWSTemplateFormatVersion: '2010-09-09'
Description: RAG Lab with 50GiB single root volume (/dev/sda1) /Complete with Ollama and FastAPI
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH key name for EC2 access

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: RAGLAB

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: RAGLAB

  IGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs eu-north-1]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: RAGLAB

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs eu-north-1]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: RAGLAB

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: RAGLAB

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  SubnetRoute1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  SubnetRoute2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and API
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: RAGLAB

  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB public access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: RAGLAB

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.large
      KeyName: !Ref KeyName
      ImageId: ami-0becc523130ac9d5d
      SubnetId: !Ref Subnet1

      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
            VolumeType: gp3
      SecurityGroupIds:
        - !Ref InstanceSG
      Tags:
        - Key: Name
          Value: RAGLAB
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -euo pipefail
          exec > >(tee /var/log/user-data.log | logger -t user-data -s 2>/dev/console) 2>&1
          export DEBIAN_FRONTEND=noninteractive

          apt update -y
          apt install -y \
            git \
            curl \
            unzip \
            software-properties-common \
            python3-pip \
            python3.10-venv \
            python-is-python3 \
            jq

          # Create working dir and clone repo
          mkdir -p /home/ubuntu/aieccws
          cd /home/ubuntu/aieccws
          rm -rf aieccws/rag-lab-app || true
          git clone https://github.com/Shahosa/aieccws.git
          cd aieccws/rag-lab-app

          # Setup Python venv and install dependencies
          python3 -m venv raglab-env
          chown -R ubuntu:ubuntu raglab-env
          sudo -u ubuntu bash -c "source raglab-env/bin/activate && pip install --upgrade pip"
          sudo -u ubuntu bash -c "source raglab-env/bin/activate && pip install fastapi uvicorn python-multipart faiss-cpu httpx pymupdf python-docx"

          # Create empty documents.json
          echo "[]" > /home/ubuntu/aieccws/aieccws/rag-lab-app/documents.json
          chown ubuntu:ubuntu /home/ubuntu/aieccws/aieccws/rag-lab-app/documents.json
          chmod 664 /home/ubuntu/aieccws/aieccws/rag-lab-app/documents.json

          # Install Ollama
          curl -fsSL https://ollama.com/install.sh | sh

          # Start Ollama systemd service
          systemctl enable ollama
          systemctl start ollama

          # Wait for Ollama to become responsive
          for i in {1..10}; do
            if curl -s http://127.0.0.1:11434/api/generate > /dev/null; then
              echo "Ollama is ready"
              break
            else
              echo "Waiting for Ollama..."
              sleep 5
            fi
          done

          # Pull models (run with HOME set, as ubuntu user)
          #sudo -u ubuntu HOME=/home/ubuntu ollama pull llama2:7b
          sudo -u ubuntu HOME=/home/ubuntu ollama pull tinyllama

          # Start FastAPI app
          export HOME=/home/ubuntu
          nohup /home/ubuntu/aieccws/aieccws/rag-lab-app/raglab-env/bin/uvicorn app:app --host 0.0.0.0 --port 8000 > /var/log/fastapi.log 2>&1 &

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckPath: /status
      Matcher:
        HttpCode: 200
      Targets:
        - Id: !Ref EC2Instance
          Port: 8000
      Tags:
        - Key: Name
          Value: RAGLAB

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref ALBSG
      Tags:
        - Key: Name
          Value: RAGLAB

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

Outputs:
  PublicIP:
    Description: SSH IP
    Value: !GetAtt EC2Instance.PublicIp

  LoadBalancerDNS:
    Description: DNS to access API
    Value: !GetAtt LoadBalancer.DNSName